---
description: Rules for TypeScript
globs: **/*.ts,app/**/*.vue
alwaysApply: false
---
# Rules for TypeScript

This rule provides standards for TypeScript.
Apply these rules when writing TypeScript files or Vue component setup functions.

## General

- Prefer function declarations over function expressions. However, when passing a function to a parameter, prefer using a function expression.
- Define function return types for better readability and type safety.
- Prefer interface over type when defining an object type.
- Use literal union types over enums.
- Use `unknown` over `any`.
- Prefer `undefined` over `null` unless `null` has to be used.
- Prefer `for...of` statement over `forEach`. However, allow use of `forEach` when chaining.
- Avoid non-null assertion operator (`!`) unless absolutely sure the value cannot be `null` or `undefined`.
- Put `as const` on constant objects.
- Prefer the guard clause (early return) when the rest of the function can be skipped after the return.
- Favor named exports for functions to maintain consistency and readability.

## Code Style

- Use tabs for indentation.

## Documents

- Write JSDoc comments for all exported functions, variables, and types for better readability and understanding.
- In JSDoc, `@return` annotation can be omitted since it's self-explanatory in most cases.
- Document complex functions with clear examples.

## Naming Conventions

- Use UPPER_CASE for constants.
- Use upper case for acronyms. For example, name `getURL` instead of `getUrl`.
- Use Map as a suffix for all variables, parameters, and properties whose value is a Map instance. For example, `const userMap = new Map<string, User>()`. This rule must be applied to ref objects too.
- Use Set as a suffix for all variables, parameters, and properties whose value is a Set instance. For example, `const userIdSet = new Set<string>()`. This rule must be applied to ref objects too.

## Nuxt

Follow these instructions when writing composables or component setup functions.

- Take advantage of VueUse functions to enhance reactivity and performance.
- Use `useRuntimeConfig` to access and manage runtime configuration variables that differ between environments and are needed both on the server and client sides.
- Pass an object to `navigateTo` for better type safety. For example, `navigateTo({ name: 'about' })` instead of `navigateTo('/about')`.

## Import

- Do not rely on Nuxt auto-import system. Import files explicitly.
- Put .ts extension when importing TypeScript file.
