---
description: Rules for Vue components
globs: app/**/*.vue
alwaysApply: false
---
# Vue component rules

This rule provides standards for Vue components.

## File

- Use **PascalCase** for component file names (e.g., `components/MyComponent.vue`).

## SFC structure

- In SFC file, define each section in order: `<script>`, `<template>`, `<style>`.
- Prefer Composition API `<script setup>` style.

## About `<script setup>`

- Use TypeScript.
- In SFC file, add JSDoc at the top of `<script>` section to explain the component.
- Use `defineModel` for v-model bindings.
- Use `useTemplateRef` introduced in Vue 3.5 when you need a template reference.
- Define `computed` type for better type safety. For example, `const nextLevel = computed<number>(() => currentLevel.value + 1)`.
- Define prop types by specifying `defineProps` generic rather than `Props` type. For example, `defineProps<{ level: number }>()`.
- Define emit types by specifying `defineEmits` generic rather than `Emits` type. For example, `defineEmits<{ (e: 'close'): void }>()`.
- Prefer type-only emit declarations introduced in Vue 3.3. For example, `defineEmits<{ change: [id: number] }>()`.
- Always add JSDoc to component props and emits.
- Always add JSDoc to model variables defined by `defineModel`
- For a reactive variable, use `undefined` over `null` if the default value is not known.
- Import components explicitly when using them in the `<template>` section. Don't rely on auto-import feature provided by Nuxt.

## About `<template>`

- Use HTML5 semantic elements (`<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<footer>`, `<search>`, etc.).
- Include appropriate ARIA attributes for accessibility.
- Ensure valid markup that passes W3C validation.
- Include `loading="lazy"` on images where applicable.
- Avoid using index for `key` attribute when using `v-for`.
- Prefer v-show when toggling visibility frequently, otherwise use v-if.
- Specify `type` attribute for `<button>` elements.
- Pass an object to `<NuxtLink :to>` for better type safety. For example, `<NuxtLink :to="{ name: 'about' }">`.
- Use TailwindCSS for styling.
